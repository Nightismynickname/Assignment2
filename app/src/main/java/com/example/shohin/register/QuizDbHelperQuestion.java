package com.example.shohin.register;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import java.util.ArrayList;
import java.util.List;

public class QuizDbHelperQuestion extends SQLiteOpenHelper{

    private static final String DATABASE_NAME = "Assorted_SQLite_Quiz";
    private static final int DATABASE_VERSION = 1;
    private SQLiteDatabase db;



    public QuizDbHelperQuestion(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION); //this is an autogenerated Constructor

    }

    @Override
    public void onCreate(SQLiteDatabase db) { //creating the intial database here
        this.db = db;

        final String SQL_CREATE_QUESTIONS_TABLE = "CREATE TABLE " +
                QuizContract.QuestionTable.TABLE_NAME + " ( " +
                QuizContract.QuestionTable._ID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
                QuizContract.QuestionTable.COLUMN_QUESTION + " TEXT, " +
                QuizContract.QuestionTable.COLUMN_OPTION1 + " TEXT, " +
                QuizContract.QuestionTable.COLUMN_OPTION2 + " TEXT, " +
                QuizContract.QuestionTable.COLUMN_OPTION3 + " TEXT, " +
                QuizContract.QuestionTable.COLUMN_OPTION4 + " TEXT, " +
                QuizContract.QuestionTable.COLUMN_ANSWER_NUMBER + " INTEGER " +
                " ) ";

        db.execSQL(SQL_CREATE_QUESTIONS_TABLE);

        fillQuestionsTable();

    } //closing onCreate

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) { // On update allows for the updating of variables during running
        db.execSQL("DROP TABLE IF EXISTS " + QuizContract.QuestionTable.TABLE_NAME);
        onCreate(db);
    } //closing of onUpgrade

    private void fillQuestionsTable() {
        Question q1 = new Question("A IS ALWAYS CORRECT" ,"A","B","C","D",1);
        addQuestion(q1);
        Question q2 = new Question("B IS ALWAYS CORRECT" ,"A","B","C","D",2);
        addQuestion(q2);
        Question q3 = new Question("C IS ALWAYS CORRECT" ,"A","B","C","D",3);
        addQuestion(q3);
        Question q4 = new Question("D IS ALWAYS CORRECT" ,"A","B","C","D",4);
        addQuestion(q4);
        Question q5 = new Question("A IS ALWAYS CORRECT AGAIN" ,"A","B","C","D",1);
        addQuestion(q5);
    }//closing of private void fillQuestionsTable

    private void addQuestion(Question question){
        ContentValues cv = new ContentValues();
        cv.put(QuizContract.QuestionTable.COLUMN_QUESTION, question.getQuestion());
        cv.put(QuizContract.QuestionTable.COLUMN_OPTION1, question.getOption1());
        cv.put(QuizContract.QuestionTable.COLUMN_OPTION2, question.getOption2());
        cv.put(QuizContract.QuestionTable.COLUMN_OPTION3, question.getOption3());
        cv.put(QuizContract.QuestionTable.COLUMN_OPTION4, question.getOption4());
        cv.put(QuizContract.QuestionTable.COLUMN_ANSWER_NUMBER, question.getAnswer_number());

        db.insert(QuizContract.QuestionTable.TABLE_NAME,null,cv);
    } //closing of private void addQuestion

    public List<Question> getAllQuestions(){
        List<Question> questionList = new ArrayList<>();
        db = getReadableDatabase();
        Cursor c = db.rawQuery("SELECT * FROM " + QuizContract.QuestionTable.TABLE_NAME,null);

        if (c.moveToFirst()) //move to first moves the cursor to the first entry if does not exist it will return false
        {
            do
            {
                Question question = new Question();
                question.setQuestion(c.getString(c.getColumnIndex(QuizContract.QuestionTable.COLUMN_QUESTION)));
                question.setOption1(c.getString(c.getColumnIndex(QuizContract.QuestionTable.COLUMN_OPTION1)));
                question.setOption2(c.getString(c.getColumnIndex(QuizContract.QuestionTable.COLUMN_OPTION2)));
                question.setOption3(c.getString(c.getColumnIndex(QuizContract.QuestionTable.COLUMN_OPTION3)));
                question.setOption4(c.getString(c.getColumnIndex(QuizContract.QuestionTable.COLUMN_OPTION4)));
                question.setAnswer_number(c.getInt(c.getColumnIndex(QuizContract.QuestionTable.COLUMN_ANSWER_NUMBER)));
                questionList.add(question);
            } while (c.moveToNext()); //moves cursor to next extry if it exists
        } //close of if move to first

        c.close();
        return questionList;

    }//closing of public List getAllQuestions
} //closing public class QuizDBHelper (This is an Auto-Generated Super Class with SQLiteDatabaseOpenHelper


